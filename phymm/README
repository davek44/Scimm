SYSTEM REQUIREMENTS:

- You'll need a local copy of the standalone BLAST
  software; this can be downloaded for your local
  platform from
   
   ftp://ftp.ncbi.nih.gov/blast/executables/release/

  PhymmBL only formally supports versions up to 2.2.22;
  the newer BLAST+ applications are not supported.

- A minimum 120GB of disk space should be available
  for installation; 200GB is recommended, especially
  if you're adding your own custom sequence data to
  the local database (see below).

- 1GB of free memory is preferred; 750MB should suffice;
  500MB or less will likely cause problems.

- You'll need to have a relatively modern version
  of Perl installed, including the Net::FTP package.

- Your system will need to have the (free) UNIX utility
  "wget" installed.  This utility is included in
  many Linux/UNIX distributions, but please note that it
  isn't included with the Mac OS developer toolkit; the
  website for the software is
   
   http://www.gnu.org/software/wget/

INSTALLATION:

To install, run "phymmSetup.pl" from this directory and follow
the prompts.

The installer will download all the current bacterial &
archaeal genomic data from RefSeq, set up needed metadata,
and build the IMMs that comprise the core of the Phymm system.

It'll also build a local BLAST database representing
all the genomic data from RefSeq.

ADDING YOUR OWN GENOMIC DATA:

To add your own genomic data (as sequences in FASTA/multiFASTA
format) to Phymm's local database, run "addCustomGenome.pl"
from this directory and follow the prompts.  Note that you
can only add one organism at a time using this script; if you
want to add more than one organism, you'll need to run it
multiple times.  You can, however, add multiple sequences
at once, as long as they're all from the same organism.

UPDATING YOUR DATABASE WITH NEW REFSEQ CONTENT:

Re-run "phymmSetup.pl" and follow the prompts; if you so choose,
you'll be able to update your local genomic database with only
those RefSeq sequences that have been added or changed since
your last update.  You can also completely overwrite your
local database with the current copy of the RefSeq collection,
if you like.  Note that this won't affect any custom user-added
content.

MANUALLY REBUILDING THE BLAST DATABASE:

Run "rebuildBlastDB.pl" from this directory.  This can be
useful if, for example, you've added multiple organisms with
multiple runs of "addCustomGenome.pl", declining each time
to automatically regenerate the local BLAST database, in
favor of doing it just once when you've finished adding
the entire batch of new organisms.

TO CLASSIFY READS:

With your set of query reads saved into a multi-FASTA
file (make sure each read has a *unique* identifier
immediately following the '>' on its comment line),
run "scoreReads.pl <query-read file>".  Result files
will be generated for Phymm, BLAST (using the local
database constructed during installation), and PhymmBL
(a weighted combination of the two designed to maximize
accuracy).

TAKING ADVANTAGE OF MATE PAIRS:

Providing more sequence information to Phymm will result
in more accurate classification; if you have mate-pair
data, we recommend concatenating each pair, with a string
of 5 or 10 'N's linking the two.

PARALLELIZATION:

The Phymm portion of the PhymmBL package is currently
a single-processor program.

If you have multiple processors available and wish
to parallelize your classification runs, scoreReads.pl
is designed to allow multiple copies to run in parallel;
you can split your input data (FASTA sequences) into
as many files as your system can comfortably handle,
then run scoreReads.pl separately, in parallel, on each
one.  This will substantially improve processing time.

Example scenario: Your sequence data is in a file called
"queryReads.fasta".  You have six processors available on
your system, and you want to use, say, four of them for
classification.

Break up "queryReads.fasta" into four roughly equally-sized
multifasta files, say "queryReads_1.fasta", "queryReads_2.fasta",
etc., one for each processor to be used.  Then run
scoreReads.pl separately on each of the four input chunks, e.g.:

   nohup scoreReads.pl queryReads_1.fasta &
   nohup scoreReads.pl queryReads_2.fasta &
   nohup scoreReads.pl queryReads_3.fasta &
   nohup scoreReads.pl queryReads_4.fasta &

The 'nohup' keyword at the beginning of each line
directs the system not to kill PhymmBL if you log out
or you lose your terminal connection before the process is
finished; this is recommended, wherever possible, when
launching long-running processes like PhymmBL, since you
*really* don't want to have to start over if something ends
up going wrong with your connection that wouldn't otherwise
have affected the outcome.

The '&' character at the end will send each process to the
background, so you can regain control of your terminal before
the process is finished, which is necessary if you don't want
to open four separate terminals.  The only drawback to this,
if you log out after starting the process, is that you'll
have to manually check to see whether or not scoreReads.pl
has finished; it's done when the PhymmBL output has appeared,
which is contained in files named

   "results.03.combined_[INPUT_FILE_NAME].txt".

(If you do remain logged in after launching PhymmBL, your terminal
will send you a message when each chunk has been completed.)

INTERPRETING NUMERIC SCORES:

The numeric scores assigned by Phymm and PhymmBL, which appear
in the output files ("results.*"), have no formal intrinsic meaning,
as individual scores.  Higher (more positive) scores represent more
confident predictions, while lower (more negative) scores represent
less confident predictions.  The range of these scores is
theoretically infinite: scores can be negative or positive,
but note that there is no special significance to 0; 100 is a more
confident score than -100, but similarly, 300 is more confident
than 100, and -2500 is more confident than -2800.

Observed score ranges will vary with read length (scores will be lower
for longer reads).

Importantly, please note that the confidence represented by the score
ranges is *not* a linear function.  In other words, 200, for example,
should not be interpreted as "twice as confident" as 100, and
"300 vs. 100" does not represent the same difference in confidence
as "-200 vs. -400", even though the numeric difference between each pair
of scores is the same.

We are currently developing a scheme to translate these scores into
a linear confidence estimate, which will appear in a future release.

PERFORMANCE NOTES:

Please note that the IMM-construction portion of
installation is particularly computationally intensive;
full installation (including ICM construction) took
about 24 hours on an Altus 3400 server with a 4x Opteron
850 processor, 32GB of memory, and no significant
competing processes running during that time.

Breakdown of our test installation, on the server
described above, measured in wall-clock time:

   BEGIN			       00h 00m 00s
   
   RefSeq download complete	       00h 15m 43s
   
   .genomeData/ directory populated
   with downloaded data, organism
   directory-names standardized,
   taxonomic metadata files for
   Phymm generated, and included
   GLIMMER code compiled	       00h 41m 10s

   IMM construction complete	       22h 56m 14s

   local BLAST database construction
   complete (END)		       23h 00m 34s

Note that after the installer has assessed whether it
should use a new copy of the RefSeq data or work from
an existing one, the interactive portion of the installation
is complete, and you won't need to actively monitor the
installation.

For classification, in the worst case, Phymm runs in
time comparable to BLAST; 5,730 100-bp query reads took
36.3 minutes to classify with Phymm, and the same set took
26.9 minutes to search for matches in the local database
using BLAST.  For longer reads, BLAST's running time can
be several times that of Phymm.

Combining scores to find the best consensus match for
each read (i.e., the final, PhymmBL, step) will require
500-700MB of free memory.

